<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vue路由基础]]></title>
    <url>%2Fvue%E8%B7%AF%E7%94%B1%2F</url>
    <content type="text"><![CDATA[vue路由配置 安装 install vue-router --save```1234或者```cnpm install vue-router --save 引入并使用(main.js) 12345import VueRouter from "vue-router"Vue.use(VueRouter) 配置路由 创建组件,引入组件 定义路由 (建议复制) 1234const routes = &#123; '/': Home, '/about': About&#125; 实例化VueRouter 123const router = new VueRouter&#123;( routes //详单与routes: routes)&#125; 挂载 12345new Vue(&#123; el: '#app', router, render: h =&gt; h(App)&#125;) 路由的简单用法12345678910111213141516171819202122232425262728293031323334import Vue from 'vue'import App from './App.vue'import VueRouter from 'vue-router'Vue.use(VueRouter);//1.创建组件import Home from "./components/Home.vue";import News from "./components/News.vue";//2. 配置路由const routes = [ &#123; path: '/home', component: Home &#125;, &#123; path: '/news', component: News &#125;, // &#123; path: '*', redirect: '/home' &#125;]//3.实例化VueRouterconst router = new VueRouter(&#123; routes&#125;)//4. 挂载路由new Vue(&#123; el: '#app', router, render: h =&gt; h(App)&#125;) 1234567891011//5. &lt; router-view &gt; &lt;/router-view&gt;放在根组件app&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt; &lt;router-link to=&quot;/news&quot;&gt;新闻&lt;/router-link&gt; &lt;hr&gt; &lt;router-view&gt; &lt;/router-view&gt; &lt;/div&gt;&lt;/template&gt;]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue中的组件传值]]></title>
    <url>%2Fvue%E4%B8%AD%E7%9A%84%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%2F</url>
    <content type="text"><![CDATA[Vue中的组件传值父子组件传值首先需要在父组件中引入子组件并注册(挂载) 12345678910111213141516// 引入组件 挂载组件import HelloWorld from "./components/HelloWorld.vue";//挂载组件 components: &#123; "v-home": HelloWorld &#125;//使用子组件&lt;v-home&gt;&lt;/v-home&gt;//如果想要在调用子组件的同时给子组件传值//1. 在使用子组件的时候绑定属性 // &lt;v-home :title = "title"&gt;&lt;/v-home&gt;//2. 在子组件中定义属性接收父组件的传值// props: ["title"]//ps:如果子组件和父组件含有同名的变量,以父组件为主,但尽量不要这样用 12345678910//如果想在子组件调用父组件的方法//比如父组件中有一个run方法// run(data) &#123;// alert("我是父组件的run方法" + data);// &#125;//1. 同样的方法 &lt;v-header :title="title" :run="run"&gt;&lt;/v-header&gt;//2. 子组件接收 props: ["title", "run"]//3. 用Button组件进行测试 &lt;button @click="run(666)"&gt;调用父组件的方法&lt;/button&gt;//:home="this" 可以把整个父组件传过去 非父子组件传值123456789101112131415161718192021222324252627282930313233343536373839404142434445// 1.新建一个js文件 然后引入vue 实例化vue 最后暴露这个实例 import Vue from 'vue' var vueEvent = new Vue(); export default vueEvent;// 2.在要广播的地方引入刚才定义的实例 import Bus from '../bus.js';// 3.通过vueEvent.$emit('名称',数据) import Bus from '../bus.js'; export default &#123; name: 'first', data () &#123; return &#123; value: '我来自first.vue组件！' &#125; &#125;, methods:&#123; add()&#123;// 定义add方法，并将msg通过txt传给second组件 Bus.$emit('txt',this.value); &#125; &#125; &#125;// 4.在接收数据的地方通过// vueEvent.$on('名称',function(data) &#123;// &#125;) import Bus from '../bus.js'; export default &#123; name: 'second', data () &#123; return &#123; &#125; &#125;, mounted:function()&#123; Bus.$on('txt',function(val)&#123;//监听first组件的txt事件 console.log(val); &#125;); &#125; &#125; 父组件主动获取子组件数据12345678//1.调用子组件的时候定义一个ref//&lt;v-header ref="header"&gt;&lt;/v-header&gt; &lt;v-home :title="title" :home="this" ref="home"&gt;&lt;/v-home&gt;//2.在父组件this.$refs.header.属性/方法 getChildData() &#123; console.log(this.$refs.home.msg); //子组件属性 this.$refs.home.run("newbg"); //子组件方法 &#125; 子组件主动获取父组件数据的方法1234//this.$parent.数据/方法 getParent() &#123; console.log(this.$parent.title + "------子组件主动获取父组件的数据"); &#125;]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最大子列和问题]]></title>
    <url>%2F%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[最大子列和问题题目给定K个整数组成的序列{ N1, N2, …, NK }，“连续子列”被定义为{ Ni, Ni+1, …, Nj }，其中 1≤i≤j≤K。“最大子列和”则被定义为所有连续子列元素的和中最大者。例如给定序列{ -2, 11, -4, 13, -5, -2 }，其连续子列{ 11, -4, 13 }有最大的和20。现要求你编写程序，计算给定整数序列的最大子列和。 本题旨在测试各种不同的算法在各种数据情况下的表现。各组测试数据特点如下： 数据1：与样例等价，测试基本正确性；数据2：102个随机整数；数据3：103个随机整数；数据4：104个随机整数；数据5：105个随机整数； 输入格式:输入第1行给出正整数K (≤100000)；第2行给出K个整数，其间以空格分隔。 输出格式:在一行中输出最大子列和。如果序列中所有整数皆为负数，则输出0。 输入样例:6-2 11 -4 13 -5 -2输出样例:20 解题思路最先想到的值暴力破解,但是需要三重循环,既要控制序列的首和尾,还要有一层循环进行累加,只能通过一部分测试样例 12345678910111213141516int MaxSubseqSum1 ( int A[], int N ) &#123; int ThisSum, MaxSum = 0; int i, j, k; for ( i = 0; i &lt; N; i++ ) &#123; //i是子列左端位置。 for ( j = i; j &lt; N; j++ ) &#123; //j是子列右端位置。 ThisSum = 0; // 每轮都要把ThisSum归零，累加新一轮的子列和。 for ( k = i; k &lt; j; k++ ) //将A[i]~A[j]累加，得到子列和。 ThisSum += A[k]; if ( ThisSum &gt; MaxSum ) //如果这轮的子列和比最大子列和还大，存入MaxSum. MaxSum = ThisSum; &#125; &#125; return MaxSum;&#125; 二重循环也可以实现暴力破解,一方面控制起始端,另一方不断向左累加,更新max的值 12345678910111213141516int MaxSubseqSum2 ( int A[], int N ) &#123; int ThisSum, MaxSum = 0; int i, j; for ( i = 0; i &lt; N; i++ ) &#123; //i是子列左端位置。 ThisSum = 0; //A[i]~A[j]的子列和。 for ( j = i; j &lt; N; j++ ) &#123; //j是子列右端位置。 ThisSum += A[j]; //对于相同的i，不同的j，只要在j-1处再累加1项即可。 if ( ThisSum &gt; MaxSum ) //更新MaxSum. MaxSum = ThisSum; &#125; &#125; return MaxSum;&#125; 最优的方法是在线处理,只用一层循环控制起始端不断向右累加,保证向右累加只会使结果变大,总而言之灰常巧妙! 参考代码12345678910111213141516171819202122#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int N = 100010;int num[N];int main() &#123; int max,k,now; max = now = 0; // 当前求和和最大求和 cin&gt;&gt;k; for(int i = 0;i &lt; k; i++) &#123; cin&gt;&gt;num[i]; &#125; for(int i = 0; i &lt; k; i++) &#123; now += num[i]; if(now &gt; max) max = now; else if(now &lt; 0) now = 0; &#125; cout&lt;&lt;max; return 0;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo中Markdown语法使用]]></title>
    <url>%2FHexo%E4%B8%ADMarkdown%E8%AF%AD%E6%B3%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Hexo中Markdown语法(GFM)使用提起Markdown，是项目、是不可多得的助手。Markdown 是一种轻量级的”标记语言”，优点在于（1）可以更加专注文章内容而不是排版样式。（2）轻松的导出 HTML 和本身的 .md 文件。（3）纯文本内容，兼容所有的文本编辑器与字处理软件。（4）可读，直观。适合所有人的写作语言。查资料了解到，Hexo下使用的MarkDown为Github的 GFM ，风格很漂亮，简洁美观大方。但是GFM 的MarkDown语法和标准的MarkDown稍有不同，使用过程中需要注意一些，在下面的介绍中我会进行说明的请放心。 1 Markdown语法1.1 标题Markdown支持6种级别的标题，对应html标签 h1 ~ h6 123456# h1 //一级标题 对应 &lt;h1&gt; &lt;/h1&gt;## h2 //二级标题 对应 &lt;h2&gt; &lt;/h2&gt;### h3 //三级标题 对应 &lt;h3&gt; &lt;/h3&gt;#### h4 //四级标题 对应 &lt;h4&gt; &lt;/h4&gt;##### h5 //五级标题 对应 &lt;h5&gt; &lt;/h5&gt;###### h6 //六级标题 对应 &lt;h6&gt; &lt;/h6&gt; 1.2 段落及区块引用Markdown提供了一个特殊符号 &gt; 用于段首进行强调，被强调的文字部分将会高亮显示 1&gt; 这段文字将会被高亮显示... 以上标记显示效果如下： 1.3 插入链接或图片Markdown针对链接和图片的处理也比较简单，可以使用下面的语法进行标记 12[点击跳转至百度](https://www.baidu.com)![图片](https://raw.githubusercontent.com/wugenqiang/picGo/master/pictures/015.jpg) 以上标记显示效果如下： 点击跳转至百度 图片 注： 引用图片和链接的唯一区别就是在最前方添加一个感叹号。 1.4 列表Markdown支持有序列表和无序列表两种形式： 无序列表使用 * 或 + 或 - 标识 有序列表使用数字加 . 标识，例如：1. 1.5 分隔线有时候，为了排版漂亮，可能会加入分隔线。Markdown加入分隔线非常简单，使用下面任意一种形式都可以 12***--- 以上标记显示效果如下： 1.6 内容强调有时候，我们对某一部分文字进行强调，使用 * 或 _ 包裹即可。使用单一符号标记的效果是斜体，使用两个符号标记的效果是加粗 12345678*这里是斜体*_这里是斜体_**这里是加粗**__这里是加粗__***这里是加粗并斜体***___这里是加粗并斜体___ 以上标记显示效果如下： 这里是斜体这里是斜体 这里是加粗这里是加粗 这里是加粗并斜体这里是加粗并斜体 1.7 删除线1这样来 ~~删除一段文本~~ 以上标记显示效果如下： 这样来 删除一段文本 1.8 高亮显示12使用&lt;code&gt;\`&lt;/code&gt;来强调字符//想打出 ` (反引号)需要转义，加&lt;code&gt;&lt;/code&gt;标签强调比如`突出背景色`来显示强调效果 以上标记显示效果如下： 使用来强调字符比如突出背景色 来显示强调效果 1.9 嵌套引用123456789101112131415&gt; 动物&gt;&gt; 水生动物&gt;&gt; 陆生动物&gt;&gt;&gt; 猴子&gt;&gt;&gt; 人&gt;&gt;&gt;&gt; 程序猿&gt;&gt;&gt;&gt; 攻城狮&gt;&gt;产品狗 //这里需要注意，没有空行间隔，忽略降级引用标记射鸡虱 //这里需要注意，没有空行间隔，忽略降级引用标记&gt;&gt; 两栖类动物&gt;&gt;&gt; 大鳄鱼唐老鸭两个回车结束引用,不在引用范围内了！ 以上标记显示效果如下： 动物 水生动物陆生动物 猴子人 程序猿攻城狮产品狗 //这里需要注意，没有空行间隔，忽略降级引用标记射鸡虱 //这里需要注意，没有空行间隔，忽略降级引用标记 两栖类动物 大鳄鱼唐老鸭 两个回车结束引用,不在引用范围内了！ 1.10 修改图片1.10.1 设置图片尺寸在 markdown 直接使用提供的语法引入图片是无法设置大小的，所以我们需要用到 html 的 img 标签。 1&lt;img width=&quot; &quot; alt=&quot;描述&quot; src=&quot;url&quot;/&gt; 例如： 1&lt;img width=&quot;267px&quot; alt=&quot;欢迎来访呀朋友&quot; src=&quot;https://raw.githubusercontent.com/wugenqiang/picGo/master/pictures/013.jpg&quot;/&gt; 1.10.2 设置图片居中在 markdown 设置图片居中是需要通过 div 来控制的。 1&lt;div align=center&gt;&lt;img width=&quot;267px&quot; alt=&quot;欢迎来访呀朋友&quot; src=&quot;https://raw.githubusercontent.com/wugenqiang/picGo/master/pictures/013.jpg&quot;/&gt;&lt;/div&gt; 1.11 插入代码块Markdown在IT圈子里面比较流行的一个重要原因是，它能够轻松漂亮地插入代码。方法是，使用三个反引号 ` 进行包裹即可。如果是行内代码引用，使用单个反引号进行包裹 代码块语法遵循标准 markdown 代码，使用 ``` 结束 例如：12 ​1234#!/usr/bin/env python# -*- coding: utf-8 -*-print 'Hello World! ​ 12以上标记显示效果如下： #!/usr/bin/env python print ‘Hello World! 1234注：很多人不知道怎么输入反引号。在英文模式下，找到键盘最左侧esc键下面的第一个键点击即可。有人会问：如何在代码块中打出 实际上是使用 4个包含 3个 就可以了，想表示更多，最外层+1就好了。 12​```​``` 1.12 插入表格表格是Markdown语法中比较复杂的一个，其语法如下： 12345列1 | 列2 | 列3 ----- | --- | ---- 第1行 | 12 | 13 第2行 | 22 | 23 第3行 | 32 | 33 以上标记显示效果如下： 列1 列2 列3 第1行 12 13 第2行 22 23 第3行 32 33 可以使用冒号来定义对齐方式： 全居中样式： 123表头|条目一|条目二:---:|:---:|:---:项目|项目一|项目二 以上标记显示效果如下： 表头 条目一 条目二 项目 项目一 项目二 可能有人喜欢左对齐或者右对齐，也可以设置: 1234| 左对齐 | 右对齐 | 居中 || :-------- | -------:| :--: || Computer | 5000 元 | 1台 || Phone | 1999 元 | 1部 | 以上标记显示效果如下： 左对齐 右对齐 居中 Computer 5000 元 1台 Phone 1999 元 1部 注：三个短竖杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。 1.13 特殊符号处理Markdown使用反斜杠\插入语法中用到的特殊符号。在Markdown中，主要有以下几种特殊符号需要处理： 123456789101112\ 反斜线` 反引号* 星号_ 底线&#123;&#125; 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 例如，如果你需要插入反斜杠，就连续输入两个反斜杠即可：\ \ =&gt; \ 。 注：在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。 重要：MarkDown表格中使用竖线，如何做？ 表格中使用竖线 竖线数目| 一个竖线: &amp; # 1 2 4 ;|| 两个竖线: &amp; # 1 2 4 ; &amp; # 1 2 4 ; 1.14 文本居中引用123456&#123;% cq %&#125;人生乃是一面镜子，从镜子里认识自己，我要称之为头等大事，也只是我们追求的目的！&#123;% endcq %&#125; 以上标记显示效果如下： 人生乃是一面镜子，从镜子里认识自己，我要称之为头等大事，也只是我们追求的目的！ 注：如果想修改字号，可以如下面这样设置： 12345678&lt;font size=&quot;4&quot;&gt;&#123;% cq %&#125; 人生乃是一面镜子， 从镜子里认识自己， 我要称之为头等大事， 也只是我们追求的目的！&#123;% endcq %&#125;&lt;/font&gt; 以上标记显示效果如下： 人生乃是一面镜子，从镜子里认识自己，我要称之为头等大事，也只是我们追求的目的！ 1.15 主题自带样式 note 标签1&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;default&lt;/p&gt;&lt;/div&gt; 以上标记显示效果如下： default 1&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;primary&lt;/p&gt;&lt;/div&gt; 以上标记显示效果如下： primary 1&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;success&lt;/p&gt;&lt;/div&gt; 以上标记显示效果如下： success 1&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;warning&lt;/p&gt;&lt;/div&gt; 以上标记显示效果如下： warning 1&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;danger&lt;/p&gt;&lt;/div&gt; 以上标记显示效果如下： danger 在主题配置文件中需要配置下: 123456789# Note tag (bs-callout).note: # 风格 style: flat # 要不要图标 icons: true # 圆角矩形 border_radius: 3 light_bg_offset: 0 1.16 文字处理1.16.1 文字背景色1234&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#FFFF00&gt;背景色的设置是按照十六进制颜色值：#FFFF00&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#D1EEEE&gt;背景色的设置是按照十六进制颜色值：#D1EEEE&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#C0FF3E&gt;背景色的设置是按照十六进制颜色值：#C0FF3E&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#54FF9F&gt;背景色的设置是按照十六进制颜色值：#54FF9F&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 效果如下： 背景色的设置是按照十六进制颜色值：#FFFF00 背景色的设置是按照十六进制颜色值：#D1EEEE 背景色的设置是按照十六进制颜色值：#C0FF3E 背景色的设置是按照十六进制颜色值：#54FF9F 1.16.2 文字字体123&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;&lt;font face=&quot;宋体&quot;&gt;我是宋体字&lt;/font&gt;&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑字&lt;/font&gt; 效果如下： 我是黑体字我是宋体字我是微软雅黑字 1.16.3 文字大小12345size为1：&lt;font size=&quot;1&quot;&gt;size为1&lt;/font&gt;size为2：&lt;font size=&quot;2&quot;&gt;size为2&lt;/font&gt;size为3：&lt;font size=&quot;3&quot;&gt;size为3&lt;/font&gt;size为4：&lt;font size=&quot;4&quot;&gt;size为4&lt;/font&gt;size为10：&lt;font size=&quot;10&quot;&gt;size为10&lt;/font&gt; 效果如下： size为1：size为1size为2：size为2size为3：size为3size为4：size为4size为10：size为10 1.16.4 文字颜色12345678红色文字：&lt;font color=&quot;red&quot;&gt;红色文字&lt;/font&gt;浅红色文字：&lt;font color=&quot;#dd0000&quot;&gt;浅红色文字&lt;/font&gt; 蓝色文字：&lt;font color=&quot;blue&quot;&gt;蓝色文字&lt;/font&gt;浅蓝色文字：&lt;font color=&quot;#0000dd&quot;&gt;浅蓝色文字&lt;/font&gt;绿色文字：&lt;font color=&quot;green&quot;&gt;绿色文字&lt;/font&gt;金黄色文字：&lt;font color=&quot;#FFFF00&quot;&gt;金黄色文字&lt;/font&gt;浅黄色文字：&lt;font color=&quot;#dddd00&quot;&gt;浅黄色文字&lt;/font&gt; 深黄色文字：&lt;font color=&quot;#666600&quot;&gt;深黄色文字&lt;/font&gt; 效果如下： 红色文字：红色文字浅红色文字：浅红色文字蓝色文字：蓝色文字浅蓝色文字：浅蓝色文字绿色文字：绿色文字金黄色文字：金黄色文字浅黄色文字：浅黄色文字深黄色文字：深黄色文字 需要其它更多的颜色，可以到下面这个网址查更多颜色的 RGB，或者直接用颜色的英文代替 RGBRGB颜色查询对照表 1.16.4 同时改变字体，字号和颜色123456789&lt;font face=&quot;字体&quot; size=&quot;字号&quot; color=&quot;颜色&quot;&gt;这里是需要突出显示的内容&lt;/font&gt;&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;&lt;font color=red&gt;我是红色&lt;/font&gt;&lt;font color=#008000&gt;我是绿色&lt;/font&gt;&lt;font color=Blue&gt;我是蓝色&lt;/font&gt;&lt;font size=5&gt;我是尺寸&lt;/font&gt;&lt;font face=&quot;黑体&quot; color=green size=5&gt;我是黑体，绿色，尺寸为5&lt;/font&gt; 效果如下： 这里是需要突出显示的内容我是黑体字我是微软雅黑我是华文彩云我是红色我是绿色我是蓝色我是尺寸我是黑体，绿色，尺寸为5 1.17 使用Emoji表情使用前首先要开启 emoji，默认是不显示的，参考：开启emoji表情开启 emoji 后进行操作 举例： 1Hello Hexo NexT :smile: 效果： Hello Hexo NexT 😄 更多可用 Emoji 代码参见 emoji-cheat-sheet 和 emojicopy 1.18 复选框列表(github可用,hexo不支持)在列表符号后面加上 [x] 或者 [ ] 代表选中或者未选中情况 123- [ ] content -空格[空格]空格content 解释: [ ]括号里面的空格可以换成[x],代表选中对话框 C C++ Java Qt Android C# .NET 1.19 脚注使用 [^1] [^1]:的脚注对来表示 1234567Here is a footnote reference,[^1] and another.[^longnote][^1]: Here is the footnote.[^longnote]: Here&apos;s one with multiple blocks. Subsequent paragraphs are indented to show that they belong to the previous footnote. 效果如下： Here is a footnote reference,[1] and another.[2] 2 文章编辑2.1 文章配置在hexo文件夹下右键点击Git Bash here后键入$hexo new page &quot;name&quot;，source/_post 文件夹中就会生成name.md文件，打开后即可编辑，编辑格式如下： 123456789---title: 文章名date: 2019-04-09 12:27:52 //发表日期updated: 2019-04-09 13:27:52 //更新日期categories: Markdown //文章分类tags: [tag1,tag2] //文章标签，多标签时使用英文逗号隔开photos: //如果使用Fancybox（文章头部展示图片），如此设置 //注意冒号后面有空格--- 2.2 文章折叠在要显示的文字末尾添加如下代码实现文章在主页的折叠显示。 1&lt;!-- more --&gt;]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
